<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ptrMedico.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>